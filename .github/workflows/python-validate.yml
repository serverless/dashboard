name: "Python: Validate"

on:
  pull_request:
    branches: [main]
    paths:
      - python/**
      - proto/**

jobs:
  validate:
    name: "[Linux] Python 3: Lint, Formatting & Unit Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 30

      - name: Retrieve last main commit (for `git diff` purposes)
        run: |
          git checkout -b pr
          git fetch --prune --depth=30 origin +refs/heads/main:refs/remotes/origin/main
          git checkout main
          git checkout pr

      - name: Resolve path filters
        uses: dorny/paths-filter@v2
        id: pathChanges
        with:
          filters: |
            sdk:
              - 'python/packages/sdk/**'
            sdkSchema:
              - 'python/packages/sdk-schema/**'
            awsLambdaSdk:
              - 'python/packages/aws-lambda-sdk/**'
            proto:
              - 'proto/**'
            packages:
              - 'python/packages/**'

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

          # ensure project dependencies are cached
          # When using only `pyproject.toml` for dependencies, see:
          #  https://github.com/actions/setup-python/issues/529#issuecomment-1367029699
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml

      - name: Validate code formatting
        if: steps.pathChanges.outputs.packages == 'true'
        run: |
          cd python/packages

          python3 -m pip install black
          python3 -m black --check --extend-exclude syntax_error.py .

      - name: Validate metadata formatting
        if: steps.pathChanges.outputs.packages == 'true'
        run: |
          cd python/packages
          
          python3 -m pip install pyproject-fmt
          
          for directory in */; do
            if [ -f "$directory/pyproject.toml" ]; then
              python3 -m pyproject_fmt --indent 4 $directory/pyproject.toml
            fi
          done

      - name: Check code with linter
        if: steps.pathChanges.outputs.packages == 'true'
        run: |
          cd python/packages

          python3 -m pip install ruff
          python3 -m ruff .

      - name: Install SDK project and dependencies
        if: steps.pathChanges.outputs.sdk == 'true'
        run: |
          cd python/packages/sdk
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install . pytest strenum

      - name: Run SDK unit tests
        if: steps.pathChanges.outputs.sdk == 'true'
        run: |
          cd python/packages/sdk
          source .venv/bin/activate
          python3 -m pytest

      - name: Initialize Python Environment
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd python/packages/sdk-schema
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install "betterproto[compiler]<3.0.0,>=2.0.0b5"

      - name: Buf Setup
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Buf Lint
        if: steps.pathChanges.outputs.proto == 'true'
        uses: bufbuild/buf-lint-action@v1
        with:
          input: "proto"
          github_token: ${{ github.token }}

      - name: Build Protobufs
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd ./proto
          source ../python/packages/sdk-schema/.venv/bin/activate
          buf build
          buf generate --template=buf.gen.python.yaml

      - name: Install SDK Schema
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd python/packages/sdk-schema
          source .venv/bin/activate
          python3 -m pip install .

      - name: Run SDK Schema unit tests
        if: steps.pathChanges.outputs.sdkSchema == 'true' || steps.pathChanges.outputs.proto == 'true'
        run: |
          cd python/packages/sdk-schema
          source .venv/bin/activate
          python3 -m pip install pytest
          python3 -m pytest

      - name: Install AWS Lambda SDK project and dependencies
        if: steps.pathChanges.outputs.awsLambdaSdk == 'true'
        run: |
          cd python/packages/aws-lambda-sdk
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install . pytest strenum

      - name: Run AWS Lambda SDK unit tests
        if: steps.pathChanges.outputs.awsLambdaSdk == 'true'
        run: |
          cd python/packages/aws-lambda-sdk
          source .venv/bin/activate
          python3 -m pytest
