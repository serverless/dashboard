syntax = "proto3";

package serverless.instrumentation.v1;

import "serverless/instrumentation/tags/v1/tags.proto";
import "serverless/instrumentation/v1/event.proto";

option go_package = ".;protoc";

// TracePayload is a message that will contain any number
// of Spans plus the global tags required by our Serverless Ingest
// Platform. A TracePayload DOES NOT necessarily mean that it is a
// complete Trace. It may contain only a subset of Spans that
// will make up the complete Trace.
message TracePayload {
    serverless.instrumentation.tags.v1.SlsTags sls_tags = 1;

    // A list of Spans to be ingest. Ingest does not impose a limit on the
    // number of Spans in a single payload. It is the responsibility of the
    // Span producers to limit the size of payloads based on their own requirements.
    repeated serverless.instrumentation.v1.Span spans = 3;

    // A list of Events to be ingested. Ingest does not impose a limit on the
    // number of Events in a single payload. It is the responsibility of the
    // Event producers to limit the size of paylaods based on their own requirements.
    repeated serverless.instrumentation.v1.Event events = 4;

    // The optional custom trace tags to be set by the user
    // This is expected to be a JSON object in string format.
    optional string custom_tags = 5;
}

message Span {
    // The Span ID, this will be a random 8-byte ID encoded as a length 16 lowercase hex string.
    bytes id = 1;

    // The Trace ID, this will be a random 16-byte ID encoded as a length 32 lowercase hex string.
    // The Trace ID is what is used to group all spans for specific trace together.
    bytes trace_id = 2;

    // An optional Parent Span ID to be used to create a trace's Span Dependency graph.
    // In practical terms, every span except the root span will have a parent span ID.
    optional bytes parent_span_id = 3;

    // The name of the span describes the type of span that is being produced.
    // currently have a limited set of span names
    //
    // - aws.lambda: Spans the full invocation duration of a lambda function
    // - aws.lambda.invocation: Spans the cold-start duration of a lambda function
    string name = 4;

    // The start time of the span in nanoseconds from EPOCH.
    fixed64 start_time_unix_nano = 5;

    // The end time of the span in nanoseconds from EPOCH.
    // An important invariant to keep in mind is that the root span will always have
    // the latest end time.
    fixed64 end_time_unix_nano = 6;

    // A message containing any number of Tagsets
    serverless.instrumentation.tags.v1.Tags tags = 7;

    // Eventual input body (e.g. HTTP request body)
    optional string input = 8;
    // Eventual output body (e.g. HTTP response body)
    optional string output = 9;

    // The timestamp that is created in ingestion as the search key
    optional fixed64 timestamp = 10;

    // Is historical is addedd via ingestion so that we can tell the differnce between
    // historical payloads and live streamed payloads
    optional bool is_historical = 11;

    // Type is used to determine the kind of document that is being send via a livestream
    optional string type = 12;

    // The optional custom tags to be set by the user
    // This is expected to be a JSON object in string format.
    optional string custom_tags = 13;
}
