syntax = "proto3";

package serverless.instrumentation.tags.v1;

message Tags {
  // The required set of tags for The Serverless Ingest Platform. Payloads without all these tags will be rejected.
  SlsSdkTags sls = 1;

  // ============================================ //
  // Defined TagSets start at field number 100  //
  // ========================================== //

  // ============================================ //
  // Top level tags will have their underscores replaced //
  // with periods when flattened. So for `aws_lambda` it will //
  // be converted to `aws.lambda`//

  // The root AWS Lambda Span tags.
  optional AwsLambdaTags aws_lambda = 100;

  // The AWS Lambda Initialization tags.
  optional AwsLambdaInitializationTags aws_lambda_initialization = 101;

  // The AWS Lambda Invocation tags.
  optional AwsLambdaInvocationTags aws_lambda_invocation = 102;

  // The AWS SDK Tags.
  optional AwsSdkDynamodbTags aws_sdk_dynamodb = 103;
  optional AwsSdkSqsTags aws_sdk_sqs = 104;
  optional AwsSdkSnsTags aws_sdk_sns = 105;


  // The HTTP Tags.
  optional HttpTags http = 106;

  // The HTTPS Tags.
  optional HttpTags https = 107;

  // The Express Tags.
  optional ExpressTags express = 108;

  // The AWS Trace Context Tags.
  optional AwsTags aws = 109;
}

message SlsSdkTags {
  // A Serverless Platform OrgId.
  string org_id = 1;
  // The platform that was instrumented. Currently Lambda is the only supported platform.
  string platform = 2;
  // The service that was instrumented. For Lambda this will be the function name by default.
  string service = 3;
  // The region that instrumentation was performed in. This is used to determine which Serverless Ingest API to use.
  string region = 4;

  message SdkTags {
    // The Name of the Serverless SDK used to instrument.
    string name = 1;
    // The version of the Serverless SDK used to instrument.
    string version = 2;
  }

  SdkTags sdk = 5;

  // An optional environment that can be attached.
  optional string environment = 16;
  // An optional namespace that can be attached.
  optional string namespace = 17;


}

message AwsTags {
  // The AWS Account ID that instrumentation was performed in.
  string account_id = 1;
  // The ARN of the instrumented AWS resource.
  string resource_arn = 2;

  // The optional X-Ray TraceId from AWS. This will only be available if X-Ray was enabled in the instrumented Account & Service.
  optional string xray_trace_id = 16;
}

message AwsApiGatewayTags {
  // The AWS Account ID of the API GW.
  string account_id = 1;
  // The unique id used for the API GW.
  string api_id = 2;
  // The stage of the API GW endpoint that was called.
  string api_stage = 3;

  message AwsApiGatewayRequestTags {
    // The unique API GW Request ID.
    string id = 1;
    // The request time in milliseconds from epoch.
    fixed64 time_epoch = 2;
    // The HTTP protocol of the request.
    string protocol = 3;
    // The domain name of the request.
    string domain = 4;
    // JSON string containing Request Headers
    string headers = 5;
    // The HTTP method of the request.
    string method = 6;
    // The HTTP Path of the request.
    string path = 7;


    // JSON string containing Request Path Parameters
    optional string path_parameters = 16;
    // JSON string contain Query String Parameters
    optional string string_parameters = 17;
  }

  AwsApiGatewayRequestTags request = 15;

}

message AwsLambdaTags {
  // The architecture of the Lambda function, currently either amd64 or arm64.
  string arch = 1;
  // Was the invocation a cold start?
  bool coldstart = 2;
  // The event type for the invocation.
  string event_type = 3;
  // The event source for the invocation.
  string event_source = 4;
  // The Log Group for the Lambda Function.
  string log_group = 5;
  // The Log Stream for the invocation.
  string log_stream_name = 6;
  // The Max Memory that is configured for the Lambda Function.
  fixed64 max_memory = 7;
  // The Lambda Function name.
  string name = 8;
  // The Request ID for the invocation.
  string request_id = 9;
  // The request time in milliseconds since epoch.
  fixed64 request_time_epoch = 10;
  // The Lambda Function version.
  string version = 11;

  // Was the invocation an error?
  bool error = 14;
  // Was the invocation a timeout?
  bool error_timeout = 15;
  // Optional error description.
  optional string error_culprit = 16;
  // Optional error exception message.
  optional string error_exception_message = 17;
  // Optional error exception stacktrace.
  optional string error_exception_stacktrace = 18;
  // Optional error exception type.
  optional string error_exception_type = 19;

  // The billed duration of the invocation in milliseconds. This will not be available
  // when instrumented, this will be upserted into this tag set after the report log from Cloudwatch is available.
  optional fixed64 duration = 20;
  // Optional Event Tags are from 100 on

  // Will be set if the function is handling a SQS event
  optional AwsSqsEventTags sqs = 100;
  // Will be set if the function is handling a SNS event
  optional AwsSnsEventTags sns = 101;
  // Will be set if the function is handlling HTTP requests via any method, API GW, Function URLs, etc.
  optional HttpTags http = 102;
  // Will be set if the function is handling HTTP requests via AWS API GW
  optional AwsApiGatewayTags api_gateway = 103;
}

message AwsSqsEventTags {
  // Taken from the eventSourceARN
  string queue_name = 1;
  // The operation of the SQS Event Trigger. Will always be 'receive' currently
  string operation = 2;
  // Introspected from the events records
  repeated string message_ids = 3;
}

message AwsSnsEventTags {
  // Taken from the TopicARN
  string topic_name = 1;
  // The operation of the SNS Event Trigger. Will always be 'receive' currently
  string operation = 3;
  // Introspected from the events records
  repeated string message_ids = 4;
}

message HttpTags {
  // The Path of the incoming HTTP Request Event. Depending on the event type, the path may come from
  // API Gateway or a routing library's, like express, instrumentation.
  string path = 1;
  // The method of the incoming HTTP Request Event.
  string method = 2;
  // The HTTP protocol of the incoming HTTP Request Event.
  string protocol = 3;
  // The Response Status Code.
  fixed64 status_code = 4;
}

message AwsLambdaInitializationTags {
  // The Initialization Duration of the Lambda Function. This is one part of the billed duration.
  // Maps to the Cloudwatch Logs Report "Init Duration"
  fixed64 initialization_duration = 1;
}

message AwsLambdaInvocationTags {
  // The Invocation Duration of the Lambda Function. This is one part of the billed duration.
  // Maps to the Cloudwatch Logs Report "Duration"
  fixed64 invocation_duration = 1;
}

message AwsSdkBaseTags {
  // The AWS Region this SDK call is being made against.
  string region = 1;
  // AWS Authentication signature version of the request.
  string signature_version = 2;
  // The name of the service to which a request is made.
  string aws_service = 3;
  // The name of the operation corresponding to the request.
  string operation = 4;
  // The unique ID of the request.
  string request_id = 5;
  // An optional error returned from the AWS APIs.
  optional string error = 6;
}

message AwsSdkDynamodbTags {
  // The AWS SDK base tags that all instrumented AWS SDK calls have.
  AwsSdkBaseTags aws_sdk_tags = 1;
  // The Dynamodb operation that was performed. Ex. GetItem, PutItem, Query, etc.
  string operation = 2;
  // The DynamoDB table name or names that the operation was performed on.
  repeated string table_names = 3;
  // The value of the ProjectionExpression request parameter.
  optional string projection = 4;
  // The value of the ScanIndexForward request parameter.
  optional bool scan_forward = 5;
  // The value of the AttributesToGet request parameter.
  repeated string attributes_to_get = 6;
  // The value of the ConsistentRead request parameter.
  optional bool consistent_read = 7;
  // The value of the IndexName request parameter.
  optional string index_name = 8;
  // The value of the Limit request parameter.
  optional uint32 limit = 9;
  // The value of the Select request parameter.
  optional string select = 10;
  // The value of the Segment request parameter.
  optional uint32 segment = 11;
  // The value of the TotalSegments request parameter.
  optional uint64 total_segments = 12;
  // The value of the Count response parameter.
  optional uint64 count = 13;
  // The value of the ScannedCount response parameter.
  optional uint64 scanned_count = 14;
}

message AwsSdkSqsTags {
  // The AWS SDK base tags that all instrumented AWS SDK calls have.
  AwsSdkBaseTags aws_sdk_tags = 1;
  // The SQS queue URL.
  optional string queue_name = 2;
  // The message IDs provided in the SDK operation response.
  repeated string message_ids = 3;
  // The SQS Operation that was performed.
  optional string operation = 4;
}

message AwsSdkSnsTags {
  // The AWS SDK base tags that all instrumented AWS SDK calls have.
  AwsSdkBaseTags aws_sdk_tags = 1;
  // The SNS Topic ARN, from the TopicArn request parameter.
  optional string topic_name = 2;
  // The SNS Operation that was performed.
  optional string operation = 3;
  // The message IDs provided in the SDK operation response.
  repeated string message_ids = 4;
}

message NodeHttpTags {
  // The URL of the HTTP request or response.
  string url = 1;
  // THe HTTP method of the request or response.
  string method = 2;
  // The HTTP path of the request or response.
  string path = 3;
  // The status code of the response.
  uint32 status_code = 4;
}

message ExpressTags {
  // The HTTP method defined by the Express Route Handler.
  string method = 1;
  // The HTTP Path defined by the Express Route Handler.
  string path = 2;
  // The status code returned by the Express Route Handler.
  uint32 status_code = 3;
}
