syntax = "proto3";

package serverless.instrumentation.tags.v1;

import "serverless/instrumentation/tags/v1/common.proto";

option go_package = ".;protoc";

message AwsTags {
  // The root AWS Lambda Span tags
  optional AwsLambdaTags lambda = 100;
  // The AWS SDK Tags. These are only added when instrumented code
  // makes a call to one of the AWS SDK functions
  optional AwsSdkTags sdk = 101;

  // Account Id is added to all schemas originating from aws during ingest as part of our data enrichment process
  optional string account_id = 102;
  // Region is added to all schemas originating from aws during ingest as part of our data enrichment process
  optional string region = 103;
  // RequestId is added to all schemas originating from aws lambda during ingest as part of our data enrichment process
  optional string request_id = 104;
  // ResourceName is added to all schemas originating from aws lambda during ingest as part of our data enrichment process
  optional string resource_name = 105;

  // The monotonically increasing sequence id for a LogEvent originating from aws lambda.
  // This is used to determine the ordering of messages in a given stream of logs.
  // If this is a LogEvent coming from Cloudwatch Logs, it will be provided
  // otherwise it is the responsibility of the log producer to generate
  // a sequence id.
  optional string sequence_id = 3;

  // The Cloudwatch Log Group name for logs originating from aws lambda.
  optional string log_group = 4;

  // The Cloudwatch Log Group Stream id for logs originating from aws lambda.
  optional string log_stream = 5;
}

message AwsApiGatewayTags {
  // The AWS Account ID of the API GW.
  string account_id = 1;
  // The unique id used for the API GW.
  string api_id = 2;
  // The stage of the API GW endpoint that was called.
  string api_stage = 3;

  message AwsApiGatewayRequestTags {
    reserved 3;
    reserved "path_parameters";
    // The unique API GW Request ID.
    string id = 1;
    // The request time in milliseconds from epoch.
    uint64 time_epoch = 2;
    // JSON string containing Request Path Parameters
    repeated string path_parameter_names = 4;
  }

  AwsApiGatewayRequestTags request = 15;

}

message AwsLambdaTags {
  // The architecture of the Lambda function, currently either amd64 or arm64.
  string arch = 1;
  // Was the invocation a cold start?
  bool is_coldstart = 2;
  // The event type for the invocation.
  optional string event_type = 3;
  // The event source for the invocation.
  optional string event_source = 4;
  // The Log Group for the Lambda Function.
  optional string log_group = 5;
  // The Log Stream for the invocation.
  optional string log_stream_name = 6;
  // The Max Memory that is configured for the Lambda Function.
  optional uint32 max_memory = 7;
  // The Lambda Function name.
  string name = 8;
  // The Request ID for the invocation.
  string request_id = 9;
  // The Lambda Function version.
  string version = 11;
  // The AWS Account ID of the Lambda Function
  optional string account_id = 12;

  // A Lambda function invocation can have one of the following
  // outcomes upon completion.
  enum Outcome {
    // No outcome was registered. Either information on the outcome was not disclosed (which should never be the case), or the function invocation has not been finalized yet
    OUTCOME_UNSPECIFIED = 0;
    // Function handler returned successfully
    OUTCOME_SUCCESS = 1;
    // Function crashed at initialization
    OUTCOME_ERROR_INITIALIZATION = 2;
    // Function crashed in an unhandled way at invocation (a result of either uncaught exception or unhandled rejection)
    OUTCOME_ERROR_UNHANDLED = 3;
    // Function timed out
    OUTCOME_ERROR_TIMEOUT = 4;
    // Function handler resolved with an error (either error was passed to lambda callback, or async handler resolved with error rejection)
    OUTCOME_ERROR_HANDLED = 5;
  }

  // The Outcome of the Lambda invocation
  Outcome outcome = 14;

  // Optional error exception message.
  optional string error_exception_message = 15;
  // Optional error exception stacktrace.
  optional string error_exception_stacktrace = 16;

  // The billed duration of the invocation in milliseconds. This will not be available
  // when instrumented, this will be upserted into this tag set after the report log from Cloudwatch is available.
  optional uint32 duration = 17;
  // Request body
  optional string request_body = 18;
  // Response body
  optional string response_body = 19;

  // Will be set if the function is handling a SQS event
  optional AwsSqsEventTags sqs = 100;
  // Will be set if the function is handling a SNS event
  optional AwsSnsEventTags sns = 101;
  // Will be set if the function is handling HTTP requests via any method, API GW, Function URLs, etc.
  optional serverless.instrumentation.tags.v1.HttpTags http = 102;
  // Will be set if the function is handling HTTP requests via AWS API GW
  optional AwsApiGatewayTags api_gateway = 103;
  // Will be set if function is handling HTTP requests and there's routing functionality setup
  optional HttpRouterTags http_router = 106;

  // The root AWS Lambda Span tags.
  optional AwsLambdaInitializationTags initialization = 104;
  // The AWS Lambda Invocation tags.
  optional AwsLambdaInvocationTags invocation = 105;
}

// Describe routing of incoming HTTP requests.
// Reflects configuration of a router used to route the request
// It can be Express.js, or API Gateway if Express.js is not detected to be used
message HttpRouterTags {
  // The HTTP Path defined by the route handler (either express or API Gateway)
  string path = 1;
}

message AwsSqsEventTags {
  // Taken from the eventSourceARN
  string queue_name = 1;
  // Introspected from the events records
  repeated string message_ids = 2;
}

message AwsSnsEventTags {
  // Taken from the TopicARN
  string topic_name = 1;
  // Introspected from the events records
  repeated string message_ids = 2;
}

message AwsLambdaInitializationTags {
  // The Initialization Duration of the Lambda Function. This is one part of the billed duration.
  // Maps to the Cloudwatch Logs Report "Init Duration"
  uint32 initialization_duration = 1;
}

message AwsLambdaInvocationTags {
  // The Invocation Duration of the Lambda Function. This is one part of the billed duration.
  // Maps to the Cloudwatch Logs Report "Duration"
  uint32 invocation_duration = 1;
}

message AwsSdkTags {
  // Retrieving AWS Account id is not straightforward therefore we it's not pursued at this point
  reserved 1, 8, 9;
  reserved "account_id", "request_body", "response_body";

  // The AWS Region this SDK call is being made against.
  optional string region = 2;
  // AWS Authentication signature version of the request.
  optional string signature_version = 3;
  // The name of the service to which a request is made.
  string service = 4;
  // The name of the operation corresponding to the request.
  string operation = 5;
  // The unique ID of the request.
  optional string request_id = 6;
  // An optional error returned from the AWS APIs.
  optional string error = 7;

  optional AwsSdkDynamodbTags dynamodb = 100;
  optional AwsSdkSqsTags sqs = 101;
  optional AwsSdkSnsTags sns = 102;

}

message AwsSdkDynamodbTags {
  // The DynamoDB table name
  optional string table_name = 1;
  // The value of the ProjectionExpression request parameter.
  optional string projection = 2;
  // The value of the ScanIndexForward request parameter.
  optional bool scan_forward = 3;
  // The value of the AttributesToGet request parameter.
  repeated string attributes_to_get = 4;
  // The value of the ConsistentRead request parameter.
  optional bool consistent_read = 5;
  // The value of the IndexName request parameter.
  optional string index_name = 6;
  // The value of the Limit request parameter.
  optional uint32 limit = 7;
  // The value of the Select request parameter.
  optional string select = 8;
  // The value of the Segment request parameter.
  optional uint32 segment = 9;
  // The value of the TotalSegments request parameter.
  optional uint64 total_segments = 10;
  // The value of the FilterExpression request parameter.
  optional string filter = 11;
  // The value of the KeyConditionExpression request parameter.
  optional string key_condition = 12;
  // JSON string of the ExclusiveStartKey request parameter.
  optional string exclusive_start_key = 13;
  // JSON string of the ExpressionAttributeValues request parameter.
  optional string attribute_values = 14;

  // The value of the Count response parameter.
  optional uint64 count = 100;
  // The value of the ScannedCount response parameter.
  optional uint64 scanned_count = 101;

}

message AwsSdkSqsTags {
  // The SQS queue name
  optional string queue_name = 1;
  // The message IDs provided in the SDK operation response.
  repeated string message_ids = 2;
}

message AwsSdkSnsTags {
  // The SNS Topic name taken from the TopicArn request parameter.
  optional string topic_name = 1;
  // The message IDs provided in the SDK operation response.
  repeated string message_ids = 2;
}
